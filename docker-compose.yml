x-restart-policy: &restart_policy
  restart: unless-stopped

x-logging: &logging
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "2"

x-deploy-resources: &deploy_resources
  deploy:
    resources:
      limits:
        cpus: "4.0"
        memory: 10G

x-healthcheck: &healthcheck
  interval: 10s
  start_period: 30s
  timeout: 10s
  retries: 5

x-webapp-defaults: &webapp_defaults
  image: ghcr.io/trislab/cdc-demo/webapp:${APP__VERSION}
  build:
    context: webapp
    dockerfile: Dockerfile
  networks:
    - default
  depends_on:
    postgres:
      condition: service_healthy
      restart: true
  volumes:
    - /etc/timezone:/etc/timezone:ro
    - /etc/localtime:/etc/localtime:ro
    - ./webapp/app:/app/app

services:
  autoheal:
    <<: [*restart_policy, *logging, *deploy_resources]
    image: willfarrell/autoheal:1.2.0
    network_mode: none
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      AUTOHEAL_CONTAINER_LABEL: autoheal-${COMPOSE_PROJECT_NAME}
      AUTOHEAL_INTERVAL: 10
      AUTOHEAL_START_PERIOD: 300

  proxy:
    <<: [*restart_policy, *logging, *deploy_resources]
    image: traefik:v2.5
    hostname: ${COMPOSE_PROJECT_NAME}_proxy
    ports:
      - ${APP__PORT}:80
      # - 8080:8080
    expose:
      - 8080
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - default
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker=true
      # Add a constraint to only use services with the label for this stack
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `${COMPOSE_PROJECT_NAME}`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.${COMPOSE_PROJECT_NAME}_http.address=:80
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable debug logging for local development
      - --log.level=DEBUG
      # Enable the Dashboard and API
      # - --api
      # Traefik will listen on port 8080 by default for API request.
      # - --api.insecure=true
      # Enable the metrics, with prometheus
      # - --metrics.prometheus=true
      # Enable ping with Traefik
      - --ping
    labels:
      - traefik.enable=true
      - traefik.constraint-label=${COMPOSE_PROJECT_NAME}
      # Defines a default docker network to use for connections to all containers.
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}_default
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_proxy.entrypoints=${COMPOSE_PROJECT_NAME}_http
      - traefik.http.services.${COMPOSE_PROJECT_NAME}_proxy.loadbalancer.server.port=80
      - autoheal-${COMPOSE_PROJECT_NAME}=true
    healthcheck:
      <<: *healthcheck
      test: ["CMD", "traefik", "healthcheck", "--ping"]

  whoami:
    <<: [*restart_policy, *logging, *deploy_resources]
    profiles:
      - whoami
    image: traefik/whoami:v1.10
    hostname: ${COMPOSE_PROJECT_NAME}_whoami
    networks:
      - default
    expose:
      - 80
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    labels:
      - traefik.enable=true
      - traefik.constraint-label=${COMPOSE_PROJECT_NAME}
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}_traefik
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_whoami.rule=PathPrefix(`/whoami`)
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_whoami.entrypoints=${COMPOSE_PROJECT_NAME}_http
      - traefik.http.services.${COMPOSE_PROJECT_NAME}_whoami.loadbalancer.server.port=80

  kafka:
    <<: [*restart_policy, *logging, *deploy_resources]
    image: confluentinc/cp-kafka:7.8.0
    hostname: kafka
    expose:
      - 9092
      - 29092
    environment:
      KAFKA_KRAFT_MODE: "true"  # This enables KRaft mode in Kafka
      KAFKA_PROCESS_ROLES: controller,broker  # Kafka acts as both broker and controller.
      KAFKA_NODE_ID: 1  # A unique ID for this Kafka instance.
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:29093"  # Defines the controller voters
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_LOG_RETENTION_HOURS: 2 # 1 days
      KAFKA_LOG_RETENTION_BYTES: -1
      KAFKA_LOG_SEGMENT_BYTES: 104857600 # 100MB
      KAFKA_LOG4J_ROOT_LOGLEVEL: "INFO"
      KAFKA_TOOLS_LOG4J_LOGLEVEL: "INFO"
      KAFKA_LOG4J_LOGGERS: "kafka=INFO,kafka.controller=INFO,kafka.log.LogCleaner=INFO,state.change.logger=INFO,kafka.producer.async.DefaultEventHandler=INFO"
      CLUSTER_ID: "Mk3OEYBSD34fcwNTJENDM2Qk"  # A unique ID for the Kafka cluster.
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - app-kafka-data:/var/lib/kafka/data
    networks:
      - default
    labels:
      - autoheal-${COMPOSE_PROJECT_NAME}=true
    healthcheck:
      <<: *healthcheck
      test: nc -z localhost 9092 || exit -1
    deploy:
      resources:
        limits:
          cpus: "8.0"
          memory: 20G

  kafkaui:
    <<: [*restart_policy, *logging, *deploy_resources]
    image: provectuslabs/kafka-ui:v0.7.2
    profiles:
      - kafkaui
    expose:
      - 8080
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      SERVER_SERVLET_CONTEXT_PATH: /kafkaui
    depends_on:
      - kafka
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - default
    labels:
      - traefik.enable=true
      - traefik.constraint-label=${COMPOSE_PROJECT_NAME}
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}_traefik
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_kafkaui.rule=PathPrefix(`/kafkaui/`)
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_kafkaui.entrypoints=${COMPOSE_PROJECT_NAME}_http
      - traefik.http.services.${COMPOSE_PROJECT_NAME}_kafkaui.loadbalancer.server.port=8080
      # - traefik.http.routers.${COMPOSE_PROJECT_NAME}_kafkaui.middlewares=${COMPOSE_PROJECT_NAME}_kafkaui-basicauth
      # - traefik.http.middlewares.${COMPOSE_PROJECT_NAME}_kafkaui-basicauth.basicauth.users=${APP__BASIC_AUTH}

  postgres:
    <<: [*restart_policy, *logging, *deploy_resources]
    image: postgres:15-alpine
    hostname: ${COMPOSE_PROJECT_NAME}_db
    command: >
      postgres
      -c shared_preload_libraries='pg_stat_statements'
      -c pg_stat_statements.track=all
      -c wal_level='logical'
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - app-postgres-data:/var/lib/postgresql/data/
    networks:
      - default
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_USER=${POSTGRES__USER}
      - POSTGRES_PASSWORD=${POSTGRES__PASSWORD}
      - POSTGRES_DB=${POSTGRES__DB}
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    expose:
      - 5432
    labels:
      - autoheal-${COMPOSE_PROJECT_NAME}=true
    healthcheck:
      <<: *healthcheck
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U ${POSTGRES__USER} -d ${POSTGRES__DB}'",
        ]

  pgadmin:
    <<: [*restart_policy, *logging, *deploy_resources]
    profiles:
      - pgadmin
    image: dpage/pgadmin4:7
    hostname: ${COMPOSE_PROJECT_NAME}_pgadmin
    user: root
    entrypoint: >
      /bin/sh -c "
      chmod 600 /pgpass;
      /entrypoint.sh;
      "
    networks:
      - default
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    expose:
      - 5050
    environment:
      - PGADMIN_LISTEN_PORT=5050
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN__EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN__PASSWORD}
      - SCRIPT_NAME=/pgadmin
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - app-pgadmin-data:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json
      - ./pgadmin/pgpass:/pgpass
    labels:
      - traefik.enable=true
      - traefik.constraint-label=${COMPOSE_PROJECT_NAME}
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}_traefik
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_pgadmin.rule=PathPrefix(`/pgadmin`)
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_pgadmin.entrypoints=${COMPOSE_PROJECT_NAME}_http
      - traefik.http.services.${COMPOSE_PROJECT_NAME}_pgadmin.loadbalancer.server.port=5050
      # - traefik.http.routers.${COMPOSE_PROJECT_NAME}_pgadmin.middlewares=${COMPOSE_PROJECT_NAME}_pgadmin-basicauth
      # - traefik.http.middlewares.${COMPOSE_PROJECT_NAME}_pgadmin-basicauth.basicauth.users=${APP__BASIC_AUTH}

  debezium-connect:
    <<: [*restart_policy, *logging, *deploy_resources]
    image: quay.io/debezium/connect:3.0
    environment:
      GROUP_ID: 1
      BOOTSTRAP_SERVERS: kafka:29092
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
    depends_on:
      - kafka
      - postgres
    networks:
      - default

  sink-connect:
    <<: [*restart_policy, *logging, *deploy_resources]
    image: confluentinc/cp-kafka-connect:7.8.0
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:29092
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: "connect-cluster"
      CONNECT_CONFIG_STORAGE_TOPIC: "connect-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "connect-status"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: 'false'
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: 'false'
      CONNECT_REST_ADVERTISED_HOST_NAME: "sink-connect"
      # CONNECT_PLUGIN_PATH: "/usr/share/java,/etc/kafka-connect/jars,/connect-plugins"
      CONNECT_PLUGIN_PATH: /connect-plugins
      CONNECT_REPLICATION_FACTOR: 1
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
      CONNECT_LOG4J_LOGGERS: org.reflections=ERROR
    volumes:
      - ./sink-connect/connect-plugins:/connect-plugins
    expose:
      - 8083
    depends_on:
      - kafka
      - postgres
    networks:
      - default

  create-connectors:
    <<: [*logging, *deploy_resources]
    image: curlimages/curl:8.11.1
    volumes:
      - ./connectors/connect-configs:/connect-configs
      - ./connectors/auto-create-connector.sh:/auto-create-connector.sh
    entrypoint: ["/bin/sh","-c"]
    command: /auto-create-connector.sh
    depends_on:
      debezium-connect:
        condition: service_started
        restart: true
      sink-connect:
        condition: service_started
        restart: true
      webapp-prestart:
        condition: service_completed_successfully
        restart: true
    networks:
      - default
    restart: "no"

  es:
    <<: [*restart_policy, *logging, *deploy_resources]
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.3
    hostname: ${COMPOSE_PROJECT_NAME}_es
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - app-es-data:/usr/share/elasticsearch/data
      - app-es-log:/usr/share/elasticsearch/log
      - ./es/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
    expose:
      - 9200
      - 9300
    networks:
      - default
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms10g -Xmx10g
    labels:
      - autoheal-${COMPOSE_PROJECT_NAME}=true
    healthcheck:
      <<: *healthcheck
      test: curl -s http://es:9200 >/dev/null || exit 1
    deploy:
      resources:
        limits:
          cpus: "8.0"
          memory: 20G

  kibana:
    <<: [*restart_policy, *logging, *deploy_resources]
    image: docker.elastic.co/kibana/kibana:8.14.3
    profiles:
      - kibana
    hostname: ${COMPOSE_PROJECT_NAME}_kibana
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    expose:
      - 5601
    depends_on:
      es:
        condition: service_healthy
        restart: true
    networks:
      - default
    environment:
      ELASTICSEARCH_HOSTS: http://es:9200
    labels:
      - traefik.enable=true
      - traefik.constraint-label=${COMPOSE_PROJECT_NAME}
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}_traefik
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_kibana.rule=PathPrefix(`/kibana`)
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_kibana.entrypoints=${COMPOSE_PROJECT_NAME}_http
      - traefik.http.services.${COMPOSE_PROJECT_NAME}_kibana.loadbalancer.server.port=5601
      # - traefik.http.routers.${COMPOSE_PROJECT_NAME}_kibana.middlewares=${COMPOSE_PROJECT_NAME}_kibana-basicauth
      # - traefik.http.middlewares.${COMPOSE_PROJECT_NAME}_kibana-basicauth.basicauth.users=${APP__BASIC_AUTH}

  webapp-prestart:
    <<: [*logging, *deploy_resources, *webapp_defaults]
    command: >
      sh -c "/wait-for-it.sh -t 0 postgres:5432 -- bash /prestart.sh"
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    restart: "no"

  webapp:
    <<: [*restart_policy, *logging, *deploy_resources, *webapp_defaults]
    hostname: ${COMPOSE_PROJECT_NAME}_webapp
    command: >
      sh -c "/wait-for-it.sh -t 0 postgres:5432 -- bash /start.sh"
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      webapp-prestart:
        condition: service_completed_successfully
        restart: true
      create-connectors:
        condition: service_completed_successfully
        restart: true
    expose:
      - 80
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./webapp/app:/app/app
    labels:
      - traefik.enable=true
      - traefik.constraint-label=${COMPOSE_PROJECT_NAME}
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}_traefik
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_api.rule=PathPrefix(`/`)
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_api.entrypoints=${COMPOSE_PROJECT_NAME}_http
      - traefik.http.services.${COMPOSE_PROJECT_NAME}_api.loadbalancer.server.port=80
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_api.middlewares=${COMPOSE_PROJECT_NAME}_api-ratelimit
      - traefik.http.middlewares.${COMPOSE_PROJECT_NAME}_api-ratelimit.ratelimit.average=100
      - traefik.http.middlewares.${COMPOSE_PROJECT_NAME}_api-ratelimit.ratelimit.burst=200
      - traefik.http.middlewares.${COMPOSE_PROJECT_NAME}_api-ratelimit.ratelimit.period=1m
      - autoheal-${COMPOSE_PROJECT_NAME}=true

networks:
  default:

volumes:
  app-kafka-data:
  app-pgadmin-data:
  app-postgres-data:
  app-es-data:
  app-es-log:
